#include "imports/stdlib.fc";

;; CONSTS
const int ONE_TON = 1000000000;

;; OP CODES
const op::launch_first = "op::launch_first"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case
const op::launch_second = "op::launch_second"c;
const op::set_first = "op::set_first"c; ;; 0x5720cfeb
const op::faked_launch = "op::faked_launch"c; ;;0x39041457

;; COMMENTS
const slice comment_msg_0 = "send mode = 0";
const slice comment_msg_1 = "send mode = 1";
const slice comment_msg_2 = "send mode = 2";
const slice comment_msg_128+32 = "send mode = 128 + 32";
const slice comment_msg_64 = "send_mode = 64";

;; ASM functions
() return_alt() impure asm "RETALT"; ;; for alternative return
() drop() impure asm "DROP";
forall X -> (tuple) to_tuple (X x) asm "NOP";
(int, int, int, int) untuple4_int (tuple t) asm "4 UNTUPLE";
() set_c5(cell actions) impure asm "c5 POP";
() error_opcode() impure asm "x{D7FF} @addop";
() set_lib_code(cell code, int mode) impure asm "SETLIBCODE";

int send_msg(cell msg, int mode) impure asm "SENDMSG";

() stack_overflow() impure asm """
    <{
    }>CONT // c
    0 SETNUMARGS // c'
    2 PUSHINT // c' 2
    SWAP // 2 c'
    1 -1 SETCONTARGS
""";

int read_id() {
    cell data = get_data();
    slice cdata = data.begin_parse();

    int id = cdata~load_int(32);
    return id;
}

() fake_launch(slice in_msg_body) impure {
    int error = in_msg_body~load_uint(8);


    ;; Compute Phase

    if (error == 0) { ;; success
        return ();
    }
    elseif (error == 2) {
        repeat (100) {
            drop(); ;; remove 100 elements from the stack
        }
    }
    elseif (error == 3) {
        stack_overflow();
    }
    elseif (error == 4) {
        int max_uint256 = in_msg_body~load_uint(256);
        max_uint256 += 1;
        max_uint256~impure_touch();
    }
    elseif (error == 5) {
        int negative_number = in_msg_body~load_int(8);
        cell invalid_cell = begin_cell().store_uint(negative_number, 8).end_cell();
        invalid_cell~impure_touch();
    }
    elseif (error == 6) {
        error_opcode();
        return ();
    }
    elseif (error == 7) {
        tuple t3 = to_tuple([1, 2, 3]);
        (int a1, int a2, int a3, int a4) = untuple4_int(t3);
        a1~impure_touch();
    }
    elseif (error == 8) | (error == 9) {
        cell msg = in_msg_body~load_ref();
        slice cs = msg.begin_parse();

        ;; 9 exit code
        int number = cs~load_uint(2);

        ;; 8 exit code
        cell recomp = begin_cell()
        .store_uint(number, 2)
        .store_slice(cs)
        .store_uint(2, 2) ;; overflow appears if exceed 1023 bits
        .end_cell();

        set_data(recomp);
    }
    elseif (error == 10) {
        cell dict = new_dict();
        dict~udict_set(16, 3, begin_cell()
            .store_ref(
                begin_cell()
                .store_uint(123, 32)
                .end_cell())
            .store_ref(begin_cell()
                .store_uint(123, 33)
                .end_cell())
                .end_cell()
                .begin_parse());

        (cell value, int f) = dict.udict_get_ref?(16, 3);
        value~impure_touch();
    }
    elseif (error == 11) {
        send_msg(begin_cell().end_cell(), 1);
    }
    elseif (error == 13) {
        int i = 0;
        while (i < 100) {
            i += 1;
        }
        i~impure_touch();
    }


    ;; Action Phase

    elseif (error == 32) {
        cell actions = begin_cell()
            .store_uint(0x0ec3c86d, 32)
            .store_uint(0, 8)
            .end_cell();
        set_c5(actions);
    }
    elseif (error == 33) {
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(my_address())
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        repeat(256) {
            send_raw_message(msg, 1);
        }
    }
    elseif (error == 34) {
        cell invalid_msg = begin_cell().end_cell();
        send_raw_message(invalid_msg, 0);
    }
    elseif (error == 35) {
        cell msg = begin_cell()
            .store_uint(6, 4) ;; 0110
            .store_slice("EQDKbjIcfM6ezt8KjKJJLshZJJSqX7XOA4ff-W72r5gqPrHF"a) ;; source address must be zero or my address
            .store_slice(my_address())
            .store_coins(1000000000000) ;; 1000 TON
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 1);
    }
    elseif (error == 36) {
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_uint(3, 2) ;; 11 -> MsgAddressInt
            .store_uint(2, 8) ;; 1 -> workchain (not existing)
            .store_uint(0, 256) ;; data part
            .store_coins(1000000000000) ;; 1000 TON
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 1);
    }
    elseif (error == 37) {
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(my_address())
            .store_coins(1000000000000) ;; 1000 TON
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 1);
    }
    elseif (error == 38) {
        {-
            extra_currencies$_ dict:(HashmapE 32 (VarUInteger 32))
                 = ExtraCurrencyCollection;

            https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/crypto/block/block.tlb#L118C1-L119C44
        -}
        cell extra_dict = new_dict();
        cell extra_data = begin_cell()
            .store_uint(1, 5) ;; 5 bits for the number of bytes, 1 = 8 bits
            .store_uint(1, 8) ;; 8 bits for the amount
            .end_cell();
        extra_dict~udict_set(32, 1, extra_data.begin_parse());
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(my_address())
            .store_coins(0)
            .store_uint(1, 1)
            .store_ref(extra_dict)
            .store_uint(0, 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 1);
    }
    elseif (error == 40) {
        cell deep_body = begin_cell().end_cell();
        repeat(510) {
            deep_body = begin_cell().store_ref(deep_body).end_cell();
        }
        cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(my_address())
        .store_coins(1000)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(deep_body)
        .end_cell();
        send_raw_message(msg, 0);
    }
    elseif (error == 43) {
        int i = 0;
        cell lib = begin_cell().store_uint(i, 32).end_cell();
        repeat (500) {
            i += 1;
            cell lib2 = begin_cell().store_uint(i, 32).end_cell();
            i += 1;
            lib = begin_cell().store_uint(i, 32).store_ref(lib).store_ref(lib2).end_cell();
        }

        (int a, int b, int c) = compute_data_size(lib, 2000);
        set_lib_code(lib, 1);
    }
    else {
        throw(0xffff);
    }
}

() send_message_comment(int value, int mode, slice comment, slice destination) impure inline {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(destination)
        .store_coins(value)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice(comment)
        .end_cell();

    send_raw_message(msg, mode);
}

cell build_firework(int id, int op_code, cell init_code, slice sender_address) {
    cell init_data = begin_cell()
        .store_uint(id, 32)
        .end_cell();

    ;; _ split_depth:(Maybe (## 5)) special:(Maybe TickTock)
    ;;  code:(Maybe ^Cell) data:(Maybe ^Cell)
    ;;  library:(HashmapE 256 SimpleLib) = StateInit;

    cell state_init = begin_cell()
        .store_uint(0, 1) ;; no split_depth
        .store_uint(0, 1) ;; no special
        .store_uint(1, 1) ;; we have code
        .store_ref(init_code)
        .store_uint(1, 1) ;; we have data
        .store_ref(init_data)
        .store_uint(0, 1) ;; we have no library
        .end_cell();

    int state_init_hash = cell_hash(state_init);
    slice dest_address = begin_cell().store_uint(4, 3).store_int(0, 8).store_uint(state_init_hash, 256).end_cell().begin_parse();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(dest_address)
        .store_coins(ONE_TON + ONE_TON / 10)
        ;; serialize CurrencyCollection (see below)
        .store_uint(0, 1 + 4 + 4 + 64 + 32)
        .store_uint(1, 1) ;; state_init added
        .store_uint(1, 1) ;; state_init placed in reference
        .store_ref(state_init)
        .store_uint(0,  1) ;; inplace message body flag (Either)
        .store_uint(op_code, 32)
        .store_ref(begin_cell().store_slice(sender_address).end_cell()) ;;sender address payload
        .end_cell();

    return msg;

}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    if (my_balance < ONE_TON) {
        throw(401); ;; not enough balance
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op

    if (op == op::set_first) {
        cell init_code = in_msg_body~load_ref();
        int root_id = read_id();


        ;; build and send the first fireworks

        cell msg1 = build_firework(root_id + 1, op::launch_first, init_code, sender_address);
        send_raw_message(msg1, 0);

        ;; build and send the second fireworks

        cell msg2 = build_firework(root_id + 2, op::launch_second, init_code, sender_address);
        send_raw_message(msg2, 0);
    }

    elseif (op == op::launch_first) {
        cell addr = in_msg_body~load_ref();
        sender_address = addr.begin_parse();

        ;; prepare 4 messages

        ;; msg1 - sending 0.1 TON with mode = 0
        send_message_comment(ONE_TON / 10, 0, comment_msg_0, sender_address);

        ;; msg2 - sending 0.1 TON with mode = 1
        send_message_comment(ONE_TON / 10,  1, comment_msg_1,sender_address);

        ;; msg3 - sending 0.1 TON with mode = 2
        send_message_comment(ONE_TON / 10, 2, comment_msg_2,sender_address);

        ;; msg4 - sending remaining TON with mode = 128 + 32
        ;; 32 is the flag for destroying the contract
        send_message_comment(ONE_TON / 10, 128 + 32, comment_msg_128+32,sender_address);
    }

    elseif (op == op::launch_second) {
        cell addr = in_msg_body~load_ref();
        sender_address = addr.begin_parse();

        ;; prepare a message

        ;; msg1 - sending remaining TON with mode = 64
        send_message_comment(0, 64, comment_msg_64, sender_address);

    }

    elseif (op == op::faked_launch) {
        if (in_msg_body.preload_uint(8) == 1) {
            return_alt();
        }
        fake_launch(in_msg_body);
    }

    else {
        throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
    }

    return();
}

int get_id() method_id {
    int id = read_id();
    return id;
}